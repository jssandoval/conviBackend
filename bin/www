#!/usr/bin/env node
const debug = require('debug')('2-layers:server');
const config = require('config');
const http = require('http');
const https = require('https');
const fs = require('fs');

const app = require('../app');

/**
 * Get port from environment and store in Express.
 */
const port = normalizePort(config.get('general.port') || '3000');
app.set('port', port);

const sport = normalizePort(config.get('general.sport') || '4000');
app.set('sport', sport);

/**
 * Normalize a port into a number, string, or false.
 */ 
function normalizePort(val) {
  const port = parseInt(val, 10);

  // eslint-disable-next-line
  if (isNaN(port)) {
    // named pipe
    return val;
  }  

  if (port >= 0) {
    // port number
    return port;
  }  

  return false;
}  

/**
 * Create HTTP server.
 */
const server = http.createServer(app);

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? `Pipe ${port}`
    : `Port ${port}`;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(`${bind} requires elevated privileges`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(`${bind} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
}


/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? `pipe ${addr}`
    : `port ${addr.port}`;
  console.log(`Listening on ${bind}`);
}

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port, () => {
    console.log("Express server puerto " + port + ": \x1b[32m%s\x1b[0m", "online");
});
server.on('error', onError);
server.on('listening', onListening);


// if (Âºlogger != "dev") {
//     try {
//         const privateKey  = fs.readFileSync('sslcert/server.key', 'utf8');
//         const certificate = fs.readFileSync('sslcert/server.crt', 'utf8');
//         const credentials = {key: privateKey, cert: certificate};
//     var httpsServer = https.createServer(credentials, app);
//     httpsServer.listen(app.get("sport"), () => {
//         console.log("Server on secority port", app.get("sport"));
//      //console.log("Environment:", process.env.PORT);
//     });
//     }
//     catch (e)
//     {
//         console.log(e);
//     }
// }
